#!/bin/bash

####* GIT COMMANDS ####

	lg () #* use awk to parse out the branches as a choice??
			{
			BLUE='\033[0;34m'
			# RED='\033[0;31m'
			YELLOW='\033[0;33m'
			echo -e "$BLUE Input your commit comments "
			read -r comment
			git add --all
			git commit -m "$comment"
			echo -e "$YELLOW Input the branch name "
			read -r branch
			git push -u origin "$branch"
			}
	 #* Run the line below in the '.git' directory
	 #* awk '/branch/{ print $0 }' config | awk -F '"' '{print $2}'  **Grabs macOS and linux from git config**

	#* Testing: parameter expansion for git, gq AKA, git quick.  Works can replace or work as alternative to lg ()
	gq () {
		git add .
		git commit -m "${1:-update}"  #* recieve param 1 or if no input 'update'
		git push 
	}

#* diskutil erase function
	### $1 is the volume name
	### $2 is the voluem path
	de () {
		diskutil eraseDisk exFAT "$1" /dev/disk"$2"
		}

	dku () {
		diskutil unmountDisk /dev/disk"$1"
	}

	mkd () {
		mkdir "$1"
		cd "$1" || exit
		}

#* cheat.sh command dictionary ###
	ch () {
		curl cht.sh/"$1"d
	}

	bak () {
		sudo cp "$1" "$1".bak
	}
   
	#* Disk Usage, Sorted by Size
	dus () {
  	    RED='\033[0;31m'
		BLUE='\033[0;34m'
       total=$(du -sh "$1" | cut -f1)
       du -sh "$1"/* | sort -h
       printf "\n"
       echo -e "$BLUE Total Size: $RED $total $BLUE in $RED $(readlink -f "$1")"
   }

	#* Realpath a file
	rpf () {
		realpath "$1" |  pbcopy
	}

	#* RClone Functions
	
	rcco () {
		rclone copy --max-age "$1" --no-traverse "$HOME"/OneDrive od: -P
	}

	rccg () {
	rc copy --max-age "$1" --no-traverse "$HOME"/GoogleDrive/Secure gdS: -P
	}


	#* Nmap get all ips on local network
	ips () {
		nmap -sn 192.168.1.0/24 | awk '/Nmap scan/{gsub(/[()]/,"",$NF); print $NF > "nmap_scanned_ips"}'
		cat nmap_scanned_ips
	}

#* Add color to less
man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

sd() {
		for file in $1; 
		do mv "$file" "$(echo "$file" | tr ' ' '-')" ; 
		done
}

pub () {
	curl -w "\n" ifconfig.me
}


ytd () {
	cd ~/Movies/Tubes || exit
    echo "Paste URL.. "
    read -r "target"
    /opt/homebrew/bin/yt-dlp "$target"
	rm -rf ./*.part
}

#* Virtual Box  ** Keeping for reference **
#* See Stack Exchange: https://unix.stackexchange.com/questions/218753/how-to-pass-variables-to-awk-command-with-conditions
#* pass variable to awk was the key to getting it to work
# vmh () {
# 	VBoxManage list vms | nl
# 	VBoxManage list vms | nl > vmz
# 	printf "\n"
# 	echo '     Choose a VM #' 
# 	read -r num
# 	vm=$(awk -v num="$num" 'NR==num {print}' < vmz | cut -d \" -f 2)
# 	rm vmz
# 	VBoxHeadless -s "$vm" &
# 	sleep 1
# 	printf "\n"
# }

digab () {
	dig @10.60.20.20 "$1".asheville.cc.nc.us
	
}
	
hostab () {
	BLUE='\033[0;34m'
	addr=$(host "$1".asheville.cc.nc.us)
	addr2=$(echo "$addr" | cut -d' ' -f4)
	printf "\n"
	echo "$BLUE $addr2"
	}

chks () {
		echo "$1" "$2" | sha256sum --check
}
#* param 1 is the file hash sum, param 2 is the target file

# wp () {
# 	cd ~/bin || exit
# 	find . -maxdepth 1 -type d \( ! -name . \) -exec bash -c "cd '{}' && git pull" \;
# }

nfo () {

	BLUE='\033[0;34m' 
	NC='\033[0m' # No Color
	public=$(curl -s -w '\n' ifconfig.me)

    networksetup -listallnetworkservices | nl | tee nfile
    printf "\n"
    echo "$BLUE Choose a network service to dislplay more info"

    echo "$NC" #* clears the coloring

    read -r con

    num=$(grep "$con" nfile | awk 'NR==1 {print}' | cut -c 7-)

    num=$(echo "$num" | xargs)  #* Trim whitepace with xargs

    printf "\n"

   	networksetup -getinfo "$num"

	printf "\n"

	echo "$BLUE Public IP: $NC $public"

	rm nfile   
}

shoc () {
	stat -c "%a" "$1"
}

vmfed() {
	vmrun -T fusion start /Users/thomaswhilbert/Virtual\ Machines.localized/Fedora 64-bit.vmwarevm/Fedora\ 64-bit.vmx nogui
	sleep 10
	ssh fed
}

psg () {
	ps aux | grep "$1"
	}
	